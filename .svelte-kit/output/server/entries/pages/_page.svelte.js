import { c as create_ssr_component, d as each, f as add_attribute, e as escape } from "../../chunks/ssr.js";
const css = {
  code: "h1.svelte-1f0ybev,p.svelte-1f0ybev{margin:5px;padding:0}.bottom-div.svelte-1f0ybev{display:flex;flex-direction:column;justify-content:center;align-items:center}h1.svelte-1f0ybev,p.svelte-1f0ybev{text-align:center}#unused.svelte-1f0ybev{width:200px;word-break:break-all;letter-spacing:2px;margin:0 auto;margin-top:20px}#input-box.svelte-1f0ybev{margin-top:50px;display:flex;justify-content:center;gap:10px}button.svelte-1f0ybev{width:40px;font-size:0.5rem}.guess-row.svelte-1f0ybev{box-sizing:border-box;padding:0;display:flex;justify-content:center;gap:5px;align-items:center}li.svelte-1f0ybev{list-style-type:none;width:20px;border:2px solid black;text-align:center;min-width:25px;min-height:22px}.green.svelte-1f0ybev{background-color:rgb(0, 220, 0)}.yellow.svelte-1f0ybev{background-color:yellow}.white.svelte-1f0ybev{background-color:white}",
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { onMount } from \\"svelte\\";\\n    const url = \\"https://random-word-api.vercel.app/api?words=1&length=5\\";\\n\\n    let word = \\"hello\\";\\n    let unusedLetters = \\"abcdefghijklmnopqrstuvwxyz\\".split(\\"\\");\\n\\n    onMount(async () => {\\n        const response = await fetch(url);\\n        const data = await response.json();\\n        word = data[0];\\n    });\\n\\n    let finished = false;\\n    let guesses = [\\"     \\", \\"     \\", \\"     \\", \\"     \\", \\"     \\"];\\n    let guessNumber = 0;\\n    let currentGuess = \\"\\";\\n\\n    function handleClick() {\\n        if (currentGuess.length != 5) return;\\n        if (guessNumber == 4 || currentGuess === word) {\\n            guesses[guessNumber] = currentGuess;\\n            finished = true;\\n            return;\\n        }\\n\\n        unusedLetters = unusedLetters.filter((l) => !currentGuess.includes(l));\\n\\n        guesses[guessNumber] = currentGuess;\\n        guessNumber++;\\n        currentGuess = \\"\\";\\n    }\\n\\n    function restartGame() {\\n        // im lazy!\\n        location.reload();\\n    }\\n<\/script>\\n\\n<h1>Wordle</h1>\\n{#each guesses as guess}\\n    <ul class=\\"guess-row\\">\\n        {#each guess as guess_letter, ind}\\n            {#if guess_letter === word[ind]}\\n                <!-- correct pos and letter -->\\n                <li class=\\"green\\">{guess_letter}</li>\\n            {:else if word.indexOf(guess_letter) != -1}\\n                <!-- correct letter -->\\n                <li class=\\"yellow\\">{guess_letter}</li>\\n            {:else}\\n                <!-- incorrect letter -->\\n                <li class=\\"white\\">{guess_letter}</li>\\n            {/if}\\n        {/each}\\n    </ul>\\n{/each}\\n\\n{#if !finished}\\n    <form id=\\"input-box\\" on:submit={handleClick}>\\n        <!-- svelte-ignore a11y-autofocus -->\\n        <input type=\\"text\\" maxlength=\\"5\\" bind:value={currentGuess} autofocus />\\n        <input type=\\"submit\\" value=\\"guess\\" />\\n    </form>\\n    <p id=\\"unused\\">{unusedLetters}</p>\\n{:else if currentGuess === word}\\n    <div class=\\"bottom-div\\">\\n        <h1>You win!</h1>\\n        <!-- svelte-ignore a11y-autofocus -->\\n        <button on:click={restartGame} autofocus>Retry</button>\\n    </div>\\n{:else}\\n    <div class=\\"bottom-div\\">\\n        <h1>You lose!</h1>\\n        <p>The words was {word}.</p>\\n        <!-- svelte-ignore a11y-autofocus -->\\n        <button on:click={restartGame} autofocus>Retry</button>\\n    </div>\\n{/if}\\n\\n<style>\\n    h1,\\n    p {\\n        margin: 5px;\\n        padding: 0;\\n    }\\n\\n    .bottom-div {\\n        display: flex;\\n        flex-direction: column;\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    h1,\\n    p {\\n        text-align: center;\\n    }\\n\\n    #unused {\\n        width: 200px;\\n        word-break: break-all;\\n        letter-spacing: 2px;\\n        margin: 0 auto;\\n        margin-top: 20px;\\n    }\\n\\n    #input-box {\\n        margin-top: 50px;\\n        display: flex;\\n        justify-content: center;\\n        gap: 10px;\\n    }\\n\\n    button {\\n        width: 40px;\\n        font-size: 0.5rem;\\n    }\\n\\n    .guess-row {\\n        box-sizing: border-box;\\n        padding: 0;\\n        display: flex;\\n        justify-content: center;\\n        gap: 5px;\\n        align-items: center;\\n    }\\n\\n    li {\\n        list-style-type: none;\\n        width: 20px;\\n        border: 2px solid black;\\n        text-align: center;\\n        min-width: 25px;\\n        min-height: 22px;\\n    }\\n\\n    .green {\\n        background-color: rgb(0, 220, 0);\\n    }\\n    .yellow {\\n        background-color: yellow;\\n    }\\n    .white {\\n        background-color: white;\\n    }\\n</style>\\n"],"names":[],"mappings":"AAgFI,iBAAE,CACF,gBAAE,CACE,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,CACb,CAEA,0BAAY,CACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MACjB,CAEA,iBAAE,CACF,gBAAE,CACE,UAAU,CAAE,MAChB,CAEA,sBAAQ,CACJ,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,SAAS,CACrB,cAAc,CAAE,GAAG,CACnB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,UAAU,CAAE,IAChB,CAEA,yBAAW,CACP,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,GAAG,CAAE,IACT,CAEA,qBAAO,CACH,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,MACf,CAEA,yBAAW,CACP,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,GAAG,CAAE,GAAG,CACR,WAAW,CAAE,MACjB,CAEA,iBAAG,CACC,eAAe,CAAE,IAAI,CACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAChB,CAEA,qBAAO,CACH,gBAAgB,CAAE,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CACnC,CACA,sBAAQ,CACJ,gBAAgB,CAAE,MACtB,CACA,qBAAO,CACH,gBAAgB,CAAE,KACtB"}'
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let word = "hello";
  let unusedLetters = "abcdefghijklmnopqrstuvwxyz".split("");
  let guesses = ["     ", "     ", "     ", "     ", "     "];
  let currentGuess = "";
  $$result.css.add(css);
  return `<h1 class="svelte-1f0ybev" data-svelte-h="svelte-bear57">Wordle</h1> ${each(guesses, (guess) => {
    return `<ul class="guess-row svelte-1f0ybev">${each(guess, (guess_letter, ind) => {
      return `${guess_letter === word[ind] ? ` <li class="green svelte-1f0ybev">${escape(guess_letter)}</li>` : `${word.indexOf(guess_letter) != -1 ? ` <li class="yellow svelte-1f0ybev">${escape(guess_letter)}</li>` : ` <li class="white svelte-1f0ybev">${escape(guess_letter)}</li>`}`}`;
    })} </ul>`;
  })} ${`<form id="input-box" class="svelte-1f0ybev"> <input type="text" maxlength="5" autofocus${add_attribute("value", currentGuess)}> <input type="submit" value="guess"></form> <p id="unused" class="svelte-1f0ybev">${escape(unusedLetters)}</p>`}`;
});
export {
  Page as default
};
